 /*в интерпритируемых языках исходный код не преобразуеться в машиный с помощью компелятор
 Рефлекция - возможность отслеживать исполнение кода в реальном времени
 3 группы типа данных:
 I. Элементарные 
 	1. Логические
 	2. Числовые
 	3. Строковые
 II. Тривиальные
 	1. null
	2. undefined
 III. Составные 
 	1. Объекты или коллекции значений
	2. Массивы
	3. Функции
	4. Специальные объекты 
		а) Date - для представления даты времен и работы с ним
		б) RegExp - для работы с регулярными выражениями
		в) Error - для обработки ошибок
  все Числа в javascript вещественные 2 = 2.0 числовой литерал 
  литерал - запись представляющая собой фиксированное значение (пример var x = 3;) 3 это литерал 
   Экспоненциальная запись
   MEP 
   	 M - мантисса;
   	 E - умножение;
	 P - степень ;
  0,0456 можно записать как ,0456 без нуля
  infinity - специальное числовое значение означающее бесконечность 
  
  
 
 
*/
//alert('hello');
//alert('world');


//var name; //объявление переменной
// = оператор присвоевания
/*var a = 10;
var b = 9;
alert(a);
a = 87;
alert(a); */
// типы даннеых бывают простые и сложные
// данные бывают изменяемые и не измняемые
// в изменяемым относятся объкты и массивы
// к не изменяемым относятся числа строки 
// NULL TYPE - тоесть пустота
//name = null;
//alert(typeof(name));
//undefined // для определения к переменной которая отсутствует переменная
// == оператор сравнения
// === ператор идентичности
// number - числа в jS все вещественный то есть 1.0 
// 0xff = 15 * 16 + 15 // из 0х в 10 СИ 
// 0377 = 3*64 + 7*8 + = // из 8 в 10 СИ
//8.56e12 // эспоненциальная запись
//alert(0xff); alert(0277); alert(7.4e11)
/*var numb = 34;
alert(typeof(numb)); */
/*var a, b, c;
a = 23;
b = 12;
c = a * b; //оператор умножения, деления, вычитания, 
alert(c); */
// оператор остаток от деления % 
// деление на ноль даст infifnity or -infinity 
// 0 / 0 = or infinity / -infinity = NaN
// NaN == NaN; // получим false
// alert(isNaN()); // = true
//alert(isFinite()); infynity = false / not infinity = true
//String----------------------------------------
//var str = "st'r'\"in\"g"; // ""; = 0  \ = ""
//    \t = tab; \n or \ = breking; + конкатинация строк, 
/*var str = "ctroka ";
var str1 = "stroca "
var result = '<h1>' + str + str1 + "</h1>";
document.write(result);
если файл скрипта подключен в head то данные выводятся после тега body	*/
// Boolean - логический тип данных true and false 
// && (амперсант) логическая И 
var a, b, c;
//a = true;
//a = false;
//b = true;
//c = a && b; //оба операнта должны иметь значение true
///c = a || b; // операция или она выполница если хотябы один 
//или оба будут иметь значение true
// операция не равно, отрицания, логическая не 
//c = !a; // c не равно а ПОЛУЧИМ true если а false
//alert(c);
// самам переменная не имеет тип данных.
// тип данных имеет значение 
// Boolean - функция которая выполняет приведение типа данных кокой то определеенной переменной к логическому типу т е если при выполнение скрипта в выражение буддет попадать значениияч 0 NaN null пустая строка  то интерпритатор будет принимать это как false 
//null - пустое значение не false = 0 
//var test = true;// лог тп = 1, false = 0. //'str';// = number.      0; = false
//boolean(test);
//test = Number(test); // строку приводим к цисловому типу данных 
// и наоборот можно числовой тип данный присвоить строковый (String)
//test = String(test);
//typeof(test); // = number
// parseInt - возврощает только целую часть числа остальное отбрассывает
// parseFloat - для получения вещественного числа 
// parseInt parseFloat  - отбрасывают строку которая едет после числа в значении
//var test = '11.345 sdgdtn'; // = pF 11.345; pI = 11 (ddfddvv 11.345 = NaN) 
//var test = '10' + '45'; // = 1045 т к мы складываем две строки
// если * то получим 450 т к интепритатор преобразует строки в числа будет выполнино неявное преобразование, а если там будут буквы в строке то получим NaN 
//var x = 23;
//var test = x + ''; // = test = String(x); // = string использовали механизм конкатинации 
// x = '11'; // = number 
// 0.23 = .23 
// var x = parseInt(0xff); // = 255 в 0х СИ получим  
// 0xff в 0х СИ это число = parseInt воспринимет его как 255
//test; // = NaN получим не число если не присваевать числовой тип данных
// boolean = true false
// number // string // null // undefined
// Object 
// ДОМАШНЕЕ ЗАНДАНИЕ
/* var x = 23.45;
var y = '23.67';
var z = '34.56';
y = Number(y);
var result = x * z / y; 
document.write(result);
//alert(result); */
// УРОК 2 +++++++++++++++++++++++++++++++++++++++++++++++++++++
// УСЛОВНЫЙ опереатор позволяет выполнять определенный участки кода по выполнения определенной условий
//var a = null; //56;
//var b = 56;
//var c = '66';
//if(a == b) alert("hello"); // выполнит alert
//if(flase) alert("hello"); // не выполнит 
// == сранвнение не учитывает тип данный
// === идентичнысть учитывает тип данных
// {} - (составной оператор) для выполнения целого участка кода
// else {}   // если if не выполница т е false 
// if(a == b)  alert("if"); else alert("else") // не рекомендуеться
// else принадлежит ближайшему if
/*if(a == b) {
	if(b == c) {
		alert('b = c');
	}
}
else {
	alert("a != b");
} */
/*if(a != b){
	alert("a != b"); // a < b, a > b, a <= b, a >= c, 
} */
/*if(!a){ // !a == not A 
	alert('true'); // 
}
if(a > b && b < c || c == b){ // и (&&), или(||) должны оба выполниться
	alert("true")
}
else if(a == c) {
	alert("a = c");
}
else if(b === c){
	alert("b = c");
}
else {
	alert("not");
}*/
//оператор условного присвоения
//y = (c > b) ? true : false; // ? = если, : = то выполняеться false 
// три оперранта тернандный 
// y = (a ! b) унарный оперант
//alert(y);
//switch если нужно несколько участков кода которые будут выполнять со своими условиями
/*var test = ""; //60;//null;//"string";
switch(test){ // орператор switch используеться толбько для чисел и строк
	case "": // пустая стррока проверки несколько идентичных условий
	case null: // есле  в test null дальше пишем условие
		alert("null");
	break; // = выход на один уровень в коде
	case "string":
		alert("string");
	break;
	case 10:
		alert(10);
	break;
	default:
		alert("default");
	break;
} // в операторе switch используеться оператор идентичности т е тип данных должен совподать
*/
// ++ инкримент оператор он может быть префиксный и постфиксный
//var i = "11" //10;
//i++; // постфиксный в этом случии интерпретатор выведет исходное значение и потом увеличит на 1
//alert(i); // = 2
//++i; //преффиксный здесь интерпретатор сначало вычисляет инкримент а потом добовляет i
//--i; оператор декримента 
//+1; //унарный оператор + для того что бы строку string сделать number в числовой
// -1; //вернет с противоположным знаком 
// строки являються 0х последоваптельным значениями сводяться к числовому сравнению этих же значений
/*var str_1 = "now"; // сравнение строк может дать неожиданные результаты
var str_2 = "now_2";
if(str_1 > str_2) {
	document.write("st_1r > str_2");// мы обращаемя к объекту document которы й содержит метод и свойства
}
else {
	document.write("str_1 < str_2");
} */
//домашнее задание
/*var daed = 38;
var fife = '5';
var scr = null;
if(daed == 39){
	alert("39");
	
}
else if (daed == 40) {
	;
}
++daed;
alert(daed);
var date = 31;
alert() */

var days = 31;
var dayost = 6;
var day1, result, dayR;
day1 = String(day1);
dayR = days - dayost;
//dayR = String(dayR);
if(dayR[0,1] == 25) {
	day1 = " днях"
}
//alert(dayR);
/*if(dayR[1] == 2 || 3 || 4) {
	day1 = " дня";
}
else if(day[0, 1]  == 1) {
	day1 = " день";
}
else if(day[0, 1] == 5 || 6 || 7 || 8 || 9 || 0)
	day1 = " дней" ;*/
else {
	alert(" not day");
}
result = dayR + day1;
document.write(result);

















